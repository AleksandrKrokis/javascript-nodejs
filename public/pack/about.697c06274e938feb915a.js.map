{"version":3,"sources":["webpack:///about.697c06274e938feb915a.js","webpack:///./handlers/about/client/index.js","webpack:///./handlers/about/client/citymap.js"],"names":["about","webpackJsonp_name_","module","exports","__webpack_require__","citymap","L","Google","Class","extend","includes","Mixin","Events","options","minZoom","maxZoom","tileSize","subdomains","errorTileUrl","attribution","opacity","continuousWorld","noWrap","initialize","type","Util","setOptions","this","_type","google","maps","MapTypeId","onAdd","map","insertAtTheBottom","_map","_insertAtTheBottom","_initContainer","_initMapObject","on","_resetCallback","_limitedUpdate","limitExecByInterval","_update","_reset","onRemove","_container","removeChild","off","getAttribution","setOpacity","DomUtil","tilePane","first","firstChild","create","id","insertBefore","size","getSize","style","width","x","height","y","_google_center","LatLng","Map","center","zoom","mapTypeId","disableDefaultUI","keyboardShortcuts","draggable","disableDoubleClickZoom","scrollwheel","streetViewControl","styles","featureType","elementType","stylers","weight","hue","saturation","lightness","gamma","_this","_reposition","event","addListenerOnce","onReposition","backgroundColor","_google","e","hard","_resize","bounds","getBounds","ne","getNorthEast","sw","getSouthWest","LatLngBounds","lat","lng","getCenter","_center","setCenter","setZoom","getZoom","trigger","init","attributionControl","scrollWheelZoom","markerZoomAnimation","googleLayer","addLayer","city","marker","circleMarker","location","radius","stroke","fill","clickable","fillColor","fillOpacity",142,"Москва","Екатеринбург","Ярославль","Новосибирск","Казань","Самара","Пермь","Белгород","Ростов-на-Дону","Санкт-Петербург","Калининград","Киев","Харьков","Днепропетровск","Одесса","Львов","Херсон","Донецк","Винница","Минск",155],"mappings":"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","file":"about.697c06274e938feb915a.js","sourcesContent":["var about =\nwebpackJsonp_name_([12],{\n\n/***/ 0:\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\n\t__webpack_require__(155);\n\tvar citymap = __webpack_require__(142);\n\n\t/*\n\t * L.TileLayer is used for standard xyz-numbered tile layers.\n\t * @see https://gist.github.com/crofty/2197042\n\t */\n\tL.Google = L.Class.extend({\n\t  includes: L.Mixin.Events,\n\n\t  options: {\n\t    minZoom: 0,\n\t    maxZoom: 18,\n\t    tileSize: 256,\n\t    subdomains: 'abc',\n\t    errorTileUrl: '',\n\t    attribution: '',\n\t    opacity: 1,\n\t    continuousWorld: false,\n\t    noWrap: false },\n\n\t  // Possible types: SATELLITE, ROADMAP, HYBRID\n\t  initialize: function initialize(type, options) {\n\t    L.Util.setOptions(this, options);\n\n\t    this._type = google.maps.MapTypeId[type || 'SATELLITE'];\n\t  },\n\n\t  onAdd: function onAdd(map, insertAtTheBottom) {\n\t    this._map = map;\n\t    this._insertAtTheBottom = insertAtTheBottom;\n\n\t    // create a container div for tiles\n\t    this._initContainer();\n\t    this._initMapObject();\n\n\t    // set up events\n\t    map.on('viewreset', this._resetCallback, this);\n\n\t    this._limitedUpdate = L.Util.limitExecByInterval(this._update, 150, this);\n\t    map.on('move', this._update, this);\n\t    //map.on('moveend', this._update, this);\n\n\t    this._reset();\n\t    this._update();\n\t  },\n\n\t  onRemove: function onRemove(map) {\n\t    this._map._container.removeChild(this._container);\n\t    //this._container = null;\n\n\t    this._map.off('viewreset', this._resetCallback, this);\n\n\t    this._map.off('move', this._update, this);\n\t    //this._map.off('moveend', this._update, this);\n\t  },\n\n\t  getAttribution: function getAttribution() {\n\t    return this.options.attribution;\n\t  },\n\n\t  setOpacity: function setOpacity(opacity) {\n\t    this.options.opacity = opacity;\n\t    if (opacity < 1) {\n\t      L.DomUtil.setOpacity(this._container, opacity);\n\t    }\n\t  },\n\n\t  _initContainer: function _initContainer() {\n\t    var tilePane = this._map._container;\n\t    var first = tilePane.firstChild;\n\n\t    if (!this._container) {\n\t      this._container = L.DomUtil.create('div', 'leaflet-google-layer leaflet-top leaflet-left');\n\t      this._container.id = '_GMapContainer';\n\t    }\n\n\t    if (true) {\n\t      tilePane.insertBefore(this._container, first);\n\n\t      this.setOpacity(this.options.opacity);\n\t      var size = this._map.getSize();\n\t      this._container.style.width = size.x + 'px';\n\t      this._container.style.height = size.y + 'px';\n\t    }\n\t  },\n\n\t  _initMapObject: function _initMapObject() {\n\t    this._google_center = new google.maps.LatLng(0, 0);\n\t    var map = new google.maps.Map(this._container, {\n\t      center: this._google_center,\n\t      zoom: 0,\n\t      mapTypeId: this._type,\n\t      disableDefaultUI: true,\n\t      keyboardShortcuts: false,\n\t      draggable: false,\n\t      disableDoubleClickZoom: true,\n\t      scrollwheel: false,\n\t      streetViewControl: false,\n\t      styles: [{\n\t        featureType: 'all',\n\t        elementType: 'all',\n\t        stylers: [{ weight: 0.1 }, { hue: '#a39b00' }, { saturation: -85 }, { lightness: 0 }, { gamma: 1.1 }]\n\t      }, {\n\t        featureType: 'water',\n\t        elementType: 'geometry.fill',\n\t        stylers: [{ hue: '#226c94' }, { saturation: 8 }, { lightness: -10 }]\n\t      }]\n\t    });\n\n\t    var _this = this;\n\t    this._reposition = google.maps.event.addListenerOnce(map, 'center_changed', function () {\n\t      _this.onReposition();\n\t    });\n\n\t    map.backgroundColor = '#ff0000';\n\t    this._google = map;\n\t  },\n\n\t  _resetCallback: function _resetCallback(e) {\n\t    this._reset(e.hard);\n\t  },\n\n\t  _reset: function _reset(clearOldContainer) {\n\t    this._initContainer();\n\t  },\n\n\t  _update: function _update() {\n\t    this._resize();\n\n\t    var bounds = this._map.getBounds();\n\t    var ne = bounds.getNorthEast();\n\t    var sw = bounds.getSouthWest();\n\t    var google_bounds = new google.maps.LatLngBounds(new google.maps.LatLng(sw.lat, sw.lng), new google.maps.LatLng(ne.lat, ne.lng));\n\t    var center = this._map.getCenter();\n\t    var _center = new google.maps.LatLng(center.lat, center.lng);\n\n\t    this._google.setCenter(_center);\n\t    this._google.setZoom(this._map.getZoom());\n\t    //this._google.fitBounds(google_bounds);\n\t  },\n\n\t  _resize: function _resize() {\n\t    var size = this._map.getSize();\n\t    if (this._container.style.width == size.x && this._container.style.height == size.y) {\n\t      return;\n\t    }this._container.style.width = size.x + 'px';\n\t    this._container.style.height = size.y + 'px';\n\t    google.maps.event.trigger(this._google, 'resize');\n\t  },\n\n\t  onReposition: function onReposition() {}\n\t});\n\n\t// ====================================================\n\n\texports.init = function () {\n\n\t  var map = new L.Map('map', {\n\t    center: new L.LatLng(54.231473, 37.734144),\n\t    zoom: 5,\n\t    attributionControl: false,\n\t    scrollWheelZoom: false,\n\t    markerZoomAnimation: false\n\t  });\n\t  var googleLayer = new L.Google('TERRAIN');\n\t  map.addLayer(googleLayer);\n\n\t  // Construct the circle for each value in citymap.\n\t  // Note: We scale the area of the circle based on the population.\n\t  for (var city in citymap) (function (city) {\n\t    var marker = L.circleMarker([citymap[city].location.lat - 0.01, citymap[city].location.lng], {\n\t      radius: citymap[city].radius / 3000,\n\t      stroke: false,\n\t      opacity: 1,\n\t      fill: true,\n\t      clickable: false,\n\t      fillColor: '#C13335',\n\t      fillOpacity: 1\n\t    });\n\t    map.addLayer(marker);\n\t  })(city);\n\t};\n\n\t//google.maps.event.trigger(this._google, \"resize\");\n\n/***/ },\n\n/***/ 142:\n/***/ function(module, exports, __webpack_require__) {\n\n\t// an object containing LatLng and population for each city.\n\t\"use strict\";\n\n\tmodule.exports = {\n\t  Москва: {\n\t    location: {\n\t      lat: 55.755826,\n\t      lng: 37.6173\n\t    },\n\t    radius: 30000\n\t  },\n\t  Екатеринбург: {\n\t    location: {\n\t      lat: 56.83892609999999,\n\t      lng: 60.6057025\n\t    },\n\n\t    radius: 20000\n\t  },\n\t  Ярославль: {\n\t    location: {\n\t      lat: 57.62607440000001,\n\t      lng: 39.8844708\n\t    },\n\n\t    radius: 18000\n\t  },\n\t  Новосибирск: {\n\t    location: {\n\t      lat: 55.00835259999999,\n\t      lng: 82.9357327\n\t    },\n\n\t    radius: 18000\n\t  },\n\t  Казань: {\n\t    location: {\n\t      lat: 55.790278,\n\t      lng: 49.134722\n\t    },\n\n\t    radius: 18000\n\t  },\n\t  Самара: {\n\t    location: {\n\t      lat: 53.202778,\n\t      lng: 50.140833\n\t    },\n\n\t    radius: 18000\n\t  },\n\t  Пермь: {\n\t    location: {\n\t      lat: 58.00000000000001,\n\t      lng: 56.316667\n\t    },\n\n\t    radius: 20000\n\t  },\n\t  Белгород: {\n\n\t    location: {\n\t      lat: 50.5997134,\n\t      lng: 36.5982621\n\t    },\n\n\t    radius: 18000\n\t  },\n\t  \"Ростов-на-Дону\": {\n\t    location: {\n\t      lat: 47.23333299999999,\n\t      lng: 39.7\n\t    },\n\n\t    radius: 18000\n\t  },\n\t  \"Санкт-Петербург\": {\n\t    location: {\n\t      lat: 59.9342802,\n\t      lng: 30.3350986\n\t    },\n\t    radius: 20000\n\t  },\n\t  Калининград: {\n\n\t    location: {\n\t      lat: 54.716667,\n\t      lng: 20.516667\n\t    },\n\n\t    radius: 18000\n\t  },\n\t  Киев: {\n\n\t    location: {\n\t      lat: 50.4501,\n\t      lng: 30.5234\n\t    },\n\t    radius: 30000\n\t  },\n\t  Харьков: {\n\n\t    location: {\n\t      lat: 49.9935,\n\t      lng: 36.230383\n\t    },\n\t    radius: 30000\n\t  },\n\t  Днепропетровск: {\n\n\t    location: {\n\t      lat: 48.464717,\n\t      lng: 35.046183\n\t    },\n\n\t    radius: 25000\n\t  },\n\t  Одесса: {\n\n\t    location: {\n\t      lat: 46.482526,\n\t      lng: 30.7233095\n\t    },\n\n\t    radius: 22000\n\t  },\n\t  Львов: {\n\n\t    location: {\n\t      lat: 49.839683,\n\t      lng: 24.029717\n\t    },\n\n\t    radius: 18000\n\t  },\n\t  Херсон: {\n\n\t    location: {\n\t      lat: 46.635417,\n\t      lng: 32.616867\n\t    },\n\n\t    radius: 18000\n\t  },\n\t  Донецк: {\n\n\t    location: {\n\t      lat: 48.015883,\n\t      lng: 37.80285\n\t    },\n\n\t    radius: 18000\n\t  },\n\t  Винница: {\n\n\t    location: {\n\t      lat: 49.233083,\n\t      lng: 28.468217\n\t    },\n\n\t    radius: 22000\n\t  },\n\t  Минск: {\n\n\t    location: {\n\t      lat: 53.90453979999999,\n\t      lng: 27.5615244\n\t    },\n\n\t    radius: 20000\n\t  }\n\n\t};\n\n/***/ },\n\n/***/ 155:\n/***/ function(module, exports, __webpack_require__) {\n\n\t// removed by extract-text-webpack-plugin\n\n/***/ }\n\n});\n\n\n/** WEBPACK FOOTER **\n ** about.697c06274e938feb915a.js\n **/","require('./styles');\nvar citymap = require('./citymap');\n\n/*\n * L.TileLayer is used for standard xyz-numbered tile layers.\n * @see https://gist.github.com/crofty/2197042\n */\nL.Google = L.Class.extend({\n  includes: L.Mixin.Events,\n\n  options: {\n    minZoom: 0,\n    maxZoom: 18,\n    tileSize: 256,\n    subdomains: 'abc',\n    errorTileUrl: '',\n    attribution: '',\n    opacity: 1,\n    continuousWorld: false,\n    noWrap: false,\n  },\n\n  // Possible types: SATELLITE, ROADMAP, HYBRID\n  initialize: function(type, options) {\n    L.Util.setOptions(this, options);\n\n    this._type = google.maps.MapTypeId[type || 'SATELLITE'];\n  },\n\n  onAdd: function(map, insertAtTheBottom) {\n    this._map = map;\n    this._insertAtTheBottom = insertAtTheBottom;\n\n    // create a container div for tiles\n    this._initContainer();\n    this._initMapObject();\n\n    // set up events\n    map.on('viewreset', this._resetCallback, this);\n\n    this._limitedUpdate = L.Util.limitExecByInterval(this._update, 150, this);\n    map.on('move', this._update, this);\n    //map.on('moveend', this._update, this);\n\n    this._reset();\n    this._update();\n  },\n\n  onRemove: function(map) {\n    this._map._container.removeChild(this._container);\n    //this._container = null;\n\n    this._map.off('viewreset', this._resetCallback, this);\n\n    this._map.off('move', this._update, this);\n    //this._map.off('moveend', this._update, this);\n  },\n\n  getAttribution: function() {\n    return this.options.attribution;\n  },\n\n  setOpacity: function(opacity) {\n    this.options.opacity = opacity;\n    if (opacity < 1) {\n      L.DomUtil.setOpacity(this._container, opacity);\n    }\n  },\n\n  _initContainer: function() {\n    var tilePane = this._map._container\n    var first = tilePane.firstChild;\n\n    if (!this._container) {\n      this._container = L.DomUtil.create('div', 'leaflet-google-layer leaflet-top leaflet-left');\n      this._container.id = \"_GMapContainer\";\n    }\n\n    if (true) {\n      tilePane.insertBefore(this._container, first);\n\n      this.setOpacity(this.options.opacity);\n      var size = this._map.getSize();\n      this._container.style.width = size.x + 'px';\n      this._container.style.height = size.y + 'px';\n    }\n  },\n\n  _initMapObject: function() {\n    this._google_center = new google.maps.LatLng(0, 0);\n    var map = new google.maps.Map(this._container, {\n      center: this._google_center,\n      zoom: 0,\n      mapTypeId: this._type,\n      disableDefaultUI: true,\n      keyboardShortcuts: false,\n      draggable: false,\n      disableDoubleClickZoom: true,\n      scrollwheel: false,\n      streetViewControl: false,\n      styles:             [{\n        \"featureType\": \"all\",\n        \"elementType\": \"all\",\n        \"stylers\":     [{\"weight\": 0.1}, {\"hue\": \"#a39b00\"}, {\"saturation\": -85}, {\"lightness\": 0}, {\"gamma\": 1.1}]\n      }, {\n        \"featureType\": \"water\",\n        \"elementType\": \"geometry.fill\",\n        \"stylers\":     [{\"hue\": \"#226c94\"}, {\"saturation\": 8}, {\"lightness\": -10}]\n      }]\n    });\n\n    var _this = this;\n    this._reposition = google.maps.event.addListenerOnce(map, \"center_changed\",\n      function() { _this.onReposition(); });\n\n    map.backgroundColor = '#ff0000';\n    this._google = map;\n  },\n\n  _resetCallback: function(e) {\n    this._reset(e.hard);\n  },\n\n  _reset: function(clearOldContainer) {\n    this._initContainer();\n  },\n\n  _update: function() {\n    this._resize();\n\n    var bounds = this._map.getBounds();\n    var ne = bounds.getNorthEast();\n    var sw = bounds.getSouthWest();\n    var google_bounds = new google.maps.LatLngBounds(\n      new google.maps.LatLng(sw.lat, sw.lng),\n      new google.maps.LatLng(ne.lat, ne.lng)\n    );\n    var center = this._map.getCenter();\n    var _center = new google.maps.LatLng(center.lat, center.lng);\n\n    this._google.setCenter(_center);\n    this._google.setZoom(this._map.getZoom());\n    //this._google.fitBounds(google_bounds);\n  },\n\n  _resize: function() {\n    var size = this._map.getSize();\n    if (this._container.style.width == size.x &&\n      this._container.style.height == size.y)\n      return;\n    this._container.style.width = size.x + 'px';\n    this._container.style.height = size.y + 'px';\n    google.maps.event.trigger(this._google, \"resize\");\n  },\n\n  onReposition: function() {\n    //google.maps.event.trigger(this._google, \"resize\");\n  }\n});\n\n\n\n// ====================================================\n\nexports.init = function() {\n\n  var map = new L.Map('map', {\n    center: new L.LatLng(54.231473, 37.734144),\n    zoom: 5,\n    attributionControl: false,\n    scrollWheelZoom: false,\n    markerZoomAnimation: false\n  });\n  var googleLayer = new L.Google('TERRAIN');\n  map.addLayer(googleLayer);\n\n  // Construct the circle for each value in citymap.\n  // Note: We scale the area of the circle based on the population.\n  for (var city in citymap) (function(city) {\n    var marker = L.circleMarker([citymap[city].location.lat-0.01, citymap[city].location.lng], {\n      radius: citymap[city].radius / 3000,\n      stroke: false,\n      opacity: 1,\n      fill: true,\n      clickable: false,\n      fillColor:     '#C13335',\n      fillOpacity: 1\n    });\n    map.addLayer(marker);\n\n  }(city));\n\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./handlers/about/client/index.js\n **/","// an object containing LatLng and population for each city.\nmodule.exports = {\n  \"Москва\":          {\n    \"location\": {\n      \"lat\": 55.755826,\n      \"lng\": 37.6173\n    },\n    radius:     30000\n  },\n  \"Екатеринбург\":    {\n    \"location\": {\n      \"lat\": 56.83892609999999,\n      \"lng\": 60.6057025\n    },\n\n    radius: 20000\n  },\n  \"Ярославль\":       {\n    \"location\": {\n      \"lat\": 57.62607440000001,\n      \"lng\": 39.8844708\n    },\n\n    radius: 18000\n  },\n  \"Новосибирск\":     {\n    \"location\": {\n      \"lat\": 55.00835259999999,\n      \"lng\": 82.9357327\n    },\n\n    radius: 18000\n  },\n  \"Казань\":          {\n    \"location\": {\n      \"lat\": 55.790278,\n      \"lng\": 49.134722\n    },\n\n    radius: 18000\n  },\n  \"Самара\":          {\n    \"location\": {\n      \"lat\": 53.202778,\n      \"lng\": 50.140833\n    },\n\n    radius: 18000\n  },\n  \"Пермь\":           {\n    \"location\": {\n      \"lat\": 58.00000000000001,\n      \"lng\": 56.316667\n    },\n\n    radius: 20000\n  },\n  \"Белгород\":        {\n\n    \"location\": {\n      \"lat\": 50.5997134,\n      \"lng\": 36.5982621\n    },\n\n    radius: 18000\n  },\n  \"Ростов-на-Дону\":  {\n    \"location\": {\n      \"lat\": 47.23333299999999,\n      \"lng\": 39.7\n    },\n\n    radius: 18000\n  },\n  \"Санкт-Петербург\": {\n    \"location\": {\n      \"lat\": 59.9342802,\n      \"lng\": 30.3350986\n    },\n    radius:     20000\n  },\n  \"Калининград\":     {\n\n    \"location\": {\n      \"lat\": 54.716667,\n      \"lng\": 20.516667\n    },\n\n    radius: 18000\n  },\n  \"Киев\":            {\n\n    \"location\": {\n      \"lat\": 50.4501,\n      \"lng\": 30.5234\n    },\n    radius: 30000\n  },\n  \"Харьков\":         {\n\n    \"location\": {\n      \"lat\": 49.9935,\n      \"lng\": 36.230383\n    },\n    radius: 30000\n  },\n  \"Днепропетровск\":  {\n\n    \"location\": {\n      \"lat\": 48.464717,\n      \"lng\": 35.046183\n    },\n\n    radius: 25000\n  },\n  \"Одесса\":          {\n\n    \"location\": {\n      \"lat\": 46.482526,\n      \"lng\": 30.7233095\n    },\n\n    radius: 22000\n  },\n  \"Львов\":           {\n\n    \"location\": {\n      \"lat\": 49.839683,\n      \"lng\": 24.029717\n    },\n\n    radius: 18000\n  },\n  \"Херсон\":          {\n\n    \"location\": {\n      \"lat\": 46.635417,\n      \"lng\": 32.616867\n    },\n\n    radius: 18000\n  },\n  \"Донецк\":          {\n\n    \"location\": {\n      \"lat\": 48.015883,\n      \"lng\": 37.80285\n    },\n\n    radius: 18000\n  },\n  \"Винница\":         {\n\n    \"location\": {\n      \"lat\": 49.233083,\n      \"lng\": 28.468217\n    },\n\n    radius: 22000\n  },\n  \"Минск\":           {\n\n    \"location\": {\n      \"lat\": 53.90453979999999,\n      \"lng\": 27.5615244\n    },\n\n    radius: 20000\n  }\n\n\n};\n\n\n\n\n/** WEBPACK FOOTER **\n ** ./handlers/about/client/citymap.js\n **/"],"sourceRoot":""}